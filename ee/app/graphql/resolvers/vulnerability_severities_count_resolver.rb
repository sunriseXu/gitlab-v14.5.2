# frozen_string_literal: true

module Resolvers
  class VulnerabilitySeveritiesCountResolver < VulnerabilitiesBaseResolver
    include Gitlab::Utils::StrongMemoize
    include Gitlab::Graphql::Authorize::AuthorizeResource

    type Types::VulnerabilitySeveritiesCountType, null: true
    authorize :read_security_resource
    authorizes_object!

    argument :project_id, [GraphQL::Types::ID],
             required: false,
             description: 'Filter vulnerabilities by project.'

    argument :report_type, [Types::VulnerabilityReportTypeEnum],
             required: false,
             description: 'Filter vulnerabilities by report type.'

    argument :severity, [Types::VulnerabilitySeverityEnum],
             required: false,
             description: 'Filter vulnerabilities by severity.'

    argument :state, [Types::VulnerabilityStateEnum],
             required: false,
             description: 'Filter vulnerabilities by state.'

    argument :scanner, [GraphQL::Types::String],
             required: false,
             description: 'Filter vulnerabilities by scanner.'

    argument :scanner_id, [::Types::GlobalIDType[::Vulnerabilities::Scanner]],
             required: false,
             description: 'Filter vulnerabilities by scanner ID.'

    argument :has_issues, GraphQL::Types::Boolean,
             required: false,
             description: 'Filter vulnerabilities that do or do not have issues.'

    argument :has_resolution, GraphQL::Types::Boolean,
             required: false,
             description: 'Filter vulnerabilities that do or do not have a resolution.'

    def resolve(**args)
      return Vulnerability.none unless vulnerable

      args[:scanner_id] = resolve_gids(args[:scanner_id], ::Vulnerabilities::Scanner) if args[:scanner_id]

      Hash.new(0)
        .merge(vulnerabilities(args).grouped_by_severity.count)
    end

    private

    def vulnerabilities(filters)
      Security::VulnerabilitiesFinder.new(vulnerable, filters).execute
    end
  end
end
