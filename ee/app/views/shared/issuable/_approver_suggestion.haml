- issuable = local_assigns.fetch(:issuable)
- presenter = local_assigns.fetch(:presenter)

- can_update_approvers = can?(current_user, :update_approvers, issuable)
- approver_presenter = MergeRequestApproverPresenter.new(issuable, skip_user: current_user)
- show_code_owner_tip = approver_presenter.show_code_owner_tips?

- if presenter.approval_feature_available?
  #js-mr-approvals-input{ data: { 'project_id': @target_project.id,
    'can_edit': can?(current_user, :update_approvers, issuable).to_s,
    'can_update_approvers': can_update_approvers.to_s,
    'show_code_owner_tip': show_code_owner_tip.to_s,
    'allow_multi_rule': @target_project.multiple_approval_rules_available?.to_s,
    'can-override': @target_project.can_override_approvers?.to_s,
    'mr_id': issuable.iid,
    'mr_settings_path': presenter.api_approval_settings_path,
    'eligible_approvers_docs_path': help_page_path('user/project/merge_requests/approvals/rules', anchor: 'eligible-approvers'),
    'project_settings_path': presenter.api_project_approval_settings_path } }
    = sprite_icon('spinner', size: 24, css_class: 'gl-spinner gl-mt-5')
  = render 'projects/merge_requests/code_owner_approval_rules', merge_request: @mr_presenter
